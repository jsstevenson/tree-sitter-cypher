==================
Basic return
==================
RETURN a;
---
(cypher
  (return
    (expression
      (variable
        (identifier)))))
==================
Basic addition
==================
RETURN a + 3 - 5
---
(cypher
  (return
    (expression
      (expression
        (expression
          (variable
            (identifier)))
        (expression
            (decimal_integer_literal)))
      (expression
        (decimal_integer_literal)))))
==================
Basic multiplication
==================
RETURN 1 + a * 4
---
(cypher
  (return
    (expression
      (expression
        (decimal_integer_literal))
      (expression
        (expression
          (variable
            (identifier)))
        (expression
          (decimal_integer_literal))))))
==================
Basic node match
==================
MATCH (n)
RETURN n
---
(cypher
  (match
    (pattern_element
      (node_pattern
        (variable
          (identifier)))))
  (return
    (expression
      (variable
        (identifier)))))
==================
Basic node relationship pattern and node property namespace
==================
MATCH (user)-[:FRIEND]->(friend)
RETURN user.name, friend.name
---
(cypher
  (match
    (pattern_element
      (node_pattern
        (variable
          (identifier)))
      (pattern_element_chain
        (relationship_detail
          (relationship_types
            (rel_type_name
              (identifier))))
        (node_pattern
          (variable
            (identifier))))))
  (return
    (expression
      (variable
        (identifier))
      (property_lookup
        (property_key_name
          (identifier))))
    (expression
      (variable
        (identifier))
      (property_lookup
        (property_key_name
          (identifier))))))
==================
Create statement and node match properties
==================
CREATE (john:Person {name: 'John'})
CREATE (sara:Person {name: 'Sara'})
CREATE (maria:Person {name: 'Maria'})
CREATE (john)-[:FRIEND]->(sara)-[:FRIEND]->(maria)
---
(cypher
  (create
    (pattern_element
      (node_pattern
        (variable
          (identifier))
        (node_labels
          (node_label
            (label_name
              (identifier))))
        (properties
          (map_literal
            (property_key_name
              (identifier))
            (expression
              (string_literal)))))))
  (create
    (pattern_element
      (node_pattern
        (variable
          (identifier))
        (node_labels
          (node_label
            (label_name
              (identifier))))
        (properties
          (map_literal
            (property_key_name
              (identifier))
            (expression
              (string_literal)))))))
  (create
    (pattern_element
      (node_pattern
        (variable
          (identifier))
        (node_labels
          (node_label
            (label_name
              (identifier))))
        (properties
          (map_literal
            (property_key_name
              (identifier))
            (expression
              (string_literal)))))))
  (create
    (pattern_element
      (node_pattern
        (variable
          (identifier)))
      (pattern_element_chain
        (relationship_detail
          (relationship_types
            (rel_type_name
              (identifier))))
        (node_pattern
          (variable
            (identifier))))
      (pattern_element_chain
        (relationship_detail
          (relationship_types
            (rel_type_name
              (identifier))))
        (node_pattern
          (variable
            (identifier)))))))
