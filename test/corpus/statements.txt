==================
Basic return
==================
RETURN a;
---
(cypher
  (return
    (expression
      (variable
        (identifier)))))
==================
Basic addition
==================
RETURN a + 3 - 5
---
(cypher
  (return
    (expression
      (expression
        (expression
          (variable
            (identifier)))
        (expression
            (number_literal)))
      (expression
        (number_literal)))))
==================
Basic multiplication
==================
RETURN 1 + a * 4
---
(cypher
  (return
    (expression
      (expression
        (number_literal))
      (expression
        (expression
          (variable
            (identifier)))
        (expression
          (number_literal))))))
==================
Basic node match
==================
MATCH (n)
RETURN n
---
(cypher
  (match
    (pattern_element
      (node_pattern
        (variable
          (identifier)))))
  (return
    (expression
      (variable
        (identifier)))))
==================
Basic node relationship pattern and node property namespace
==================
MATCH (user)-[:FRIEND]->(friend)
RETURN user.name, friend.name
---
(cypher
  (match
    (pattern_element
      (node_pattern
        (variable
          (identifier)))
      (relationship_detail
        (relationship_types
          (rel_type_name
            (identifier))))
      (node_pattern
        (variable
          (identifier)))))
  (return
    (expression
      (variable
        (identifier))
      (property_lookup
        (property_key_name
          (identifier))))
    (expression
      (variable
        (identifier))
      (property_lookup
        (property_key_name
          (identifier))))))
==================
Create statement and node match properties
==================
CREATE (john:Person {name: 'John'})
CREATE (sara:Person {name: 'Sara'})
CREATE (maria:Person {name: 'Maria'})
CREATE (john)-[:FRIEND]->(sara)-[:FRIEND]->(maria)
---
(cypher
  (create
    (pattern_element
      (node_pattern
        (variable
          (identifier))
        (node_labels
          (label_name
            (identifier)))
        (properties
          (map_literal
            (property_key_name
              (identifier))
            (expression
              (string_literal)))))))
  (create
    (pattern_element
      (node_pattern
        (variable
          (identifier))
        (node_labels
          (label_name
            (identifier)))
        (properties
          (map_literal
            (property_key_name
              (identifier))
            (expression
              (string_literal)))))))
  (create
    (pattern_element
      (node_pattern
        (variable
          (identifier))
        (node_labels
          (label_name
            (identifier)))
        (properties
          (map_literal
            (property_key_name
              (identifier))
            (expression
              (string_literal)))))))
  (create
    (pattern_element
      (node_pattern
        (variable
          (identifier)))
      (relationship_detail
        (relationship_types
          (rel_type_name
            (identifier))))
      (node_pattern
        (variable
          (identifier)))
      (relationship_detail
        (relationship_types
          (rel_type_name
            (identifier))))
      (node_pattern
        (variable
          (identifier))))))
==================
IN operator
==================
MATCH (user)-[:FRIEND]->(follower)
WHERE user.name IN ['Joe', 'John', 'Sara'] AND follower.name =~ 'S.*'
RETURN user
---
(cypher
  (match
    (pattern_element
      (node_pattern
        (variable
          (identifier)))
      (relationship_detail
        (relationship_types
          (rel_type_name
            (identifier))))
      (node_pattern
        (variable
          (identifier))))
    (where
      (expression
        (expression
          (variable
            (identifier))
          (property_lookup
            (property_key_name
              (identifier)))
          (list
            (expression
              (string_literal))
            (expression
              (string_literal))
            (expression
              (string_literal))))
        (boolean_algebreic_operator)
        (expression
          (expression
            (variable
              (identifier))
            (property_lookup
              (property_key_name
                (identifier))))
          (comparison_operator)
          (expression
            (string_literal))))))
  (return
    (expression
      (variable
        (identifier)))))
==================
Function call
==================
MATCH (p:Person)
RETURN count(p.twitter);
---
(cypher
  (match
    (pattern_element
      (node_pattern
        (variable
          (identifier))
      (node_labels
        (label_name
          (identifier))))))
  (return
    (expression
      (function_invocation
        (function_name
          (identifier))
        (expression
          (variable
            (identifier))
          (property_lookup
            (property_key_name
              (identifier))))))))
==================
Multi argument function
==================
RETURN replace("hello", "l", "w")
---
(cypher
  (return
    (expression
      (function_invocation
        (function_name
          (identifier))
        (expression
          (string_literal))
        (expression
          (string_literal))
        (expression
          (string_literal))))))
==================
Parameters
==================
MATCH (n:Person)
WHERE n.name = $name
RETURN n
---
(cypher
  (match
    (pattern_element
      (node_pattern
        (variable
          (identifier))
        (node_labels
          (label_name
            (identifier)))))
  (where
    (expression
      (expression
        (variable
          (identifier))
        (property_lookup
          (property_key_name
            (identifier))))
      (comparison_operator)
      (expression
        (parameter
          (identifier))))))
  (return
    (expression
      (variable
        (identifier)))))
==================
Optional match
==================
MATCH (a:Movie {title: 'Wall Street'})
OPTIONAL MATCH (a)-->(x)
RETURN x
---
(cypher
  (match
    (pattern_element
      (node_pattern
        (variable
          (identifier))
        (node_labels
          (label_name
            (identifier)))
        (properties
          (map_literal
            (property_key_name
              (identifier))
            (expression
              (string_literal)))))))
  (match
    (pattern_element
      (node_pattern
        (variable
          (identifier)))
      (node_pattern
        (variable
          (identifier)))))
  (return
    (expression
      (variable
        (identifier)))))
==================
Multiple labels
==================
MATCH (a:User&Admin)
RETURN a
---
(cypher
  (match
    (pattern_element
      (node_pattern
        (variable
          (identifier))
        (node_labels
          (label_name
            (identifier))
          (label_name
            (identifier))))))
  (return
    (expression
      (variable
        (identifier)))))
==================
Booleans
==================
MATCH (n)
WHERE 21 < n.age AND n.age <= 30
RETURN n
---
(cypher
  (match
    (pattern_element
      (node_pattern
        (variable
          (identifier))))
    (where
      (expression
        (expression
          (expression
            (number_literal))
          (comparison_operator)
      (expression
          (variable
            (identifier))
          (property_lookup
            (property_key_name
              (identifier)))))
      (boolean_algebreic_operator)
      (expression
        (expression
          (variable
            (identifier))
          (property_lookup
            (property_key_name
              (identifier))))
        (comparison_operator)
        (expression
          (number_literal))))))
  (return
    (expression
      (variable
        (identifier)))))
==================
Booleans chained
==================
MATCH (n)
WHERE 21 < n.age <= 30
RETURN n
---
(cypher
  (match
    (pattern_element
      (node_pattern
        (variable
          (identifier))))
    (where
      (expression
        (expression
          (expression
            (number_literal))
        (comparison_operator)
        (expression
          (variable
            (identifier))
          (property_lookup
            (property_key_name
              (identifier)))))
        (comparison_operator)
        (expression
          (number_literal)))))
  (return
    (expression
      (variable
        (identifier)))))

